// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AppWebApi.Test.Postulant
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UpdatePostulantFeature : object, Xunit.IClassFixture<UpdatePostulantFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UpdatePostulant.feature"
#line hidden
        
        public UpdatePostulantFeature(UpdatePostulantFeature.FixtureData fixtureData, AppWebApi_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Postulant", "Update Postulant", "\tAs a Developer\r\n\tI want to update Postulant information through API\r\n\tSo that it" +
                    " to be validate", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line hidden
#line 7
  testRunner.Given("The Endpoint https://localhost:5001/api/v1/postulants/id is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "Name",
                        "LastName",
                        "Email",
                        "Password",
                        "MySpecialty",
                        "MyExperience",
                        "Description"});
            table9.AddRow(new string[] {
                        "1",
                        "Alex",
                        "Liza",
                        "developer-97@gmail.com",
                        "12345678",
                        "Ciencia de Datos",
                        "Junior",
                        "descripcion"});
#line 8
  testRunner.And("the Postulant is already stored", ((string)(null)), table9, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update Postulant information")]
        [Xunit.TraitAttribute("FeatureTitle", "Update Postulant")]
        [Xunit.TraitAttribute("Description", "Update Postulant information")]
        [Xunit.TraitAttribute("Category", "pustulant-updating")]
        public virtual void UpdatePostulantInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "pustulant-updating"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Postulant information", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 12
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "Name",
                            "LastName",
                            "Email",
                            "Password",
                            "MySpecialty",
                            "MyExperience",
                            "Description"});
                table10.AddRow(new string[] {
                            "1",
                            "Alex",
                            "Liza",
                            "developer-97@gmail.com",
                            "newpass",
                            "Ciencia de Datos",
                            "Junior",
                            "new description"});
#line 13
  testRunner.When("A Put request is sent", ((string)(null)), table10, "When ");
#line hidden
#line 16
  testRunner.Then("A response with Status 200 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "Name",
                            "LastName",
                            "Email",
                            "Password",
                            "MySpecialty",
                            "MyExperience",
                            "Description"});
                table11.AddRow(new string[] {
                            "1",
                            "Alex",
                            "Liza",
                            "developer-97@gmail.com",
                            "newpass",
                            "Ciencia de Datos",
                            "Junior",
                            "new description"});
#line 17
  testRunner.And("A postulant resource is included in Response Body", ((string)(null)), table11, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update Postulant with invalid information")]
        [Xunit.TraitAttribute("FeatureTitle", "Update Postulant")]
        [Xunit.TraitAttribute("Description", "Update Postulant with invalid information")]
        public virtual void UpdatePostulantWithInvalidInformation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Postulant with invalid information", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 21
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "Name",
                            "LastName",
                            "Email",
                            "Password",
                            "MySpecialty",
                            "MyExperience",
                            "Description"});
                table12.AddRow(new string[] {
                            "1",
                            "Alex",
                            "",
                            "developer-97@gmail.com",
                            "newpass",
                            "Ciencia de Datos",
                            "Junior",
                            "new description"});
#line 22
  testRunner.When("A Put request is sent", ((string)(null)), table12, "When ");
#line hidden
#line 25
    testRunner.Then("A response with Status 400 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
    testRunner.And("A message is included in Response Body with value \"Invalid Information\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Postulant is not exist")]
        [Xunit.TraitAttribute("FeatureTitle", "Update Postulant")]
        [Xunit.TraitAttribute("Description", "Postulant is not exist")]
        public virtual void PostulantIsNotExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Postulant is not exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "Name",
                            "LastName",
                            "Email",
                            "Password",
                            "MySpecialty",
                            "MyExperience",
                            "Description"});
                table13.AddRow(new string[] {
                            "69",
                            "John",
                            "Doe",
                            "developer-69@gmail.com",
                            "newpass",
                            "Ciencia de Datos",
                            "Junior",
                            "description"});
#line 29
  testRunner.When("A Put request is sent", ((string)(null)), table13, "When ");
#line hidden
#line 32
     testRunner.Then("A response with Status 404 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
     testRunner.And("A message is included in Response Body with value \"Postulant not found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UpdatePostulantFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UpdatePostulantFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
